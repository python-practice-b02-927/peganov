
Git
===

Git - это набор консольных утилит, которые отслеживают и фиксируют
изменения в файлах (чаще всего речь идет об исходном коде программ, но
вы можете использовать его для любых файлов на ваш вкус). С его помощью
вы можете откатиться на более старую версию вашего проекта, сравнивать,
анализировать, сливать изменения и многое другое. Этот процесс
называется контролем версий. Существуют различные системы для контроля
версий. Вы, возможно, о них слышали: SVN, Mercurial, Perforce, CVS,
Bitkeeper и другие.

Git является распределенным, то есть не зависит от одного центрального
сервера, на котором хранятся файлы. Вместо этого он работает полностью
локально, сохраняя данные в папках на жестком диске, которые называются
репозиторием. Тем не менее, вы можете хранить копию репозитория онлайн,
это сильно облегчает работу над одним проектом для нескольких людей. Для
этого используются сайты вроде github и bitbucket.

Настройка
---------

Итак, мы установили git, теперь нужно добавить немного настроек. Есть
довольно много опций, с которыми можно играть, но мы настроим самые
важные: наше имя пользователя и адрес электронной почты. Откройте
терминал и запустите команды:

.. code:: bash

    git config --global user.name "My Name"
    git config --global user.email myEmail@example.com

Теперь каждое наше действие будет отмечено именем и почтой. Таким
образом, пользователи всегда будут в курсе, кто отвечает за какие
изменения — это вносит порядок.

Создание нового репозитория
---------------------------

Как мы отметили ранее, git хранит свои файлы и историю прямо в папке
проекта. Чтобы создать новый репозиторий, нам нужно открыть терминал,
зайти в папку нашего проекта и выполнить команду ``init``. Это включит
приложение в этой конкретной папке и создаст скрытую директорию .git,
где будет храниться история репозитория и настройки. Создайте папку под
названием git\_exercise. Для этого в окне терминала введите:

.. code:: bash

    mkdir ~/git_exercise/
    cd ~/git_exercise/
    git init

Теперь создайте текстовый файл под названием hello.txt и сохраните его в
директории git\_exercise.

Определение состояния
---------------------

``status`` — это еще одна важнейшая команда, которая показывает
информацию о текущем состоянии репозитория: актуальна ли информация на
нём, нет ли чего-то нового, что поменялось, и так далее. Запуск
``git status`` на нашем свежесозданном репозитории должен выдать:

.. code:: bash

    git status

::

    On branch master
    Initial commit
    Untracked files:
    (use "git add ..." to include in what will be committed)
    hello.txt

Сообщение говорит о том, что файл hello.txt неотслеживаемый. Это значит,
что файл новый и система еще не знает, нужно ли следить за изменениями в
файле или его можно просто игнорировать. Для того, чтобы начать
отслеживать новый файл, нужно его специальным образом объявить.

Подготовка файлов
-----------------

В git есть концепция области подготовленных файлов. Можно представить ее
как холст, на который наносят изменения, которые нужны в коммите. Сперва
он пустой, но затем мы добавляем на него файлы (или части файлов, или
даже одиночные строчки) командой ``add`` и, наконец, коммитим все нужное
в репозиторий (создаем слепок нужного нам состояния) командой
``commit``. В нашем случае у нас только один файл, так что добавим его:

.. code:: bash

    git add hello.txt

Снова проверьте примените команду ``git status``. Теперь статус
hello.txt изменился на "staged for commit".

Коммит(фиксация изменений)
--------------------------

Коммит представляет собой состояние репозитория в определенный момент
времени. Это похоже на снапшот, к которому мы можем вернуться и увидеть
состояние объектов на определенный момент времени. Чтобы зафиксировать
изменения, нам нужно хотя бы одно изменение в области подготовки (мы
только что создали его при помощи ``git add``), после которого мы может
коммитить:

.. code:: bash

    git commit -m "Initial commit."

Эта команда создаст новый коммит со всеми изменениями из области
подготовки (добавление файла hello.txt). Ключ ``-m`` и сообщение
«Initial commit.» — это созданное пользователем описание всех изменений,
включенных в коммит. Считается хорошей практикой делать коммиты часто и
всегда писать содержательные комментарии. Для того чтобы добавить
развернутое сообщение не используйте ключ ``-m``.

Удаленные репозитории
=====================

Сейчас наш коммит является локальным — существует только в директории
.git на нашей файловой системе. Несмотря на то, что сам по себе
локальный репозиторий полезен, в большинстве случаев мы хотим поделиться
нашей работой или доставить код на сервер, где он будет выполняться.

Подключение к удаленному репозиторию
------------------------------------

Создайте свой (не в нашей организации) репозиторий git\_exercise на
github.com. Вам будет предложено добавить README.md и .gitignore: не
надо это делать.

Чтобы связать наш локальный репозиторий с репозиторием на GitHub,
выполним следующую команду в терминале. Обратите внимание, что нужно
обязательно изменить URL репозитория на свой.

.. code:: bash

    git remote add origin https://github.com/UserName/git_exercise.git

Проект может иметь несколько удаленных репозиториев одновременно. Чтобы
их различать, мы дадим им разные имена. Обычно главный репозиторий
называется origin.

Отправка изменений на сервер
----------------------------

Сейчас самое время переслать наш локальный коммит на сервер. Этот
процесс происходит каждый раз, когда мы хотим обновить данные в
удаленном репозитории. Команда, предназначенная для этого — ``push``.
Она принимает два параметра: имя удаленного репозитория (мы назвали наш
origin) и ветку, в которую необходимо внести изменения (master — это
ветка по умолчанию для всех репозиториев).

.. code:: bash

    git push --set-upstream origin master

**В дальнейшем не нужно использовать ключ ``--set-upstream``, кроме
случаев, когда отправляется новая ветка.**

В зависимости от сервиса, который вы используете, вам может
потребоваться аутентифицироваться, чтобы изменения отправились. Если все
сделано правильно, то когда вы посмотрите в удаленный репозиторий при
помощи браузера, вы увидете файл hello.txt.

Клонирование репозитория
------------------------

Сейчас другие пользователи GitHub могут просматривать ваш репозиторий.
Они могут скачать из него данные и получить полностью работоспособную
копию вашего проекта при помощи команды ``clone``.

Упражнение 1. Клонирование репозитория
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Клонируйте себе Ваш репозиторий с домашними заданиями.

--------------

Запрос изменений с сервера
--------------------------

Если вы сделали изменения в вашем репозитории, другие пользователи могут
скачать изменения при помощи команды ``pull``.

.. code:: bash

    git pull origin master

В норме чаще всего бывает достаточно ``git pull``.

### Упражнение 2. Запрос изменений

Добавьте в репозиторий через сайт файл goodbye.txt и перенесите его на
компьютер с помощью ``git pull``.

--------------

# Ветвление

Во время разработки новой функциональности считается хорошей практикой
работать с копией оригинального проекта, которую называют веткой. Ветви
имеют свою собственную историю и изолированные друг от друга изменения
до тех пор, пока вы не решаете слить изменения вместе. Это происходит по
набору причин:

-  Уже рабочая, стабильная версия кода сохраняется.

-  Различные новые функции могут разрабатываться параллельно разными
   программистами.

-  Разработчики могут работать с собственными ветками без риска, что
   кодовая база поменяется из-за чужих изменений.

-  В случае сомнений, различные реализации одной и той же идеи могут
   быть разработаны в разных ветках и затем сравниваться.

Создание новой ветки
--------------------

Основная ветка в каждом репозитории называется master. Чтобы создать еще
одну ветку, используем команду ``branch <name>``.

.. code:: bash

    git branch amazing_new_feature

Это создаст новую ветку, пока что точную копию ветки master.

Переключение между ветками
--------------------------

Сейчас, если мы запустим branch, мы увидим две доступные опции:

.. code:: bash

    git branch

master — это активная ветка, она помечена звездочкой. Но мы хотим
работать с нашей "новой потрясающей фичей", так что нам понадобится
переключиться на другую ветку. Для этого воспользуемся командой
``checkout``, она принимает один параметр — имя ветки, на которую
необходимо переключиться.

.. code:: bash

    git checkout amazing_new_feature

Слияние веток
-------------

Наша "потрясающая новая фича" будет еще одним текстовым файлом под
названием feature.txt. Мы создадим его, добавим и закоммитим:

.. code:: bash

    echo "Nice weather today, isn't it?" > feature.txt
    git add feature.txt
    git commit -m "add new feature"

Изменения завершены, теперь мы можем переключиться обратно на ветку
master.

.. code:: bash

    git checkout master

Теперь, если мы откроем наш проект в файловом менеджере, мы не увидим
файла feature.txt, потому что мы переключились обратно на ветку master,
в которой такого файла не существует. Чтобы он появился, нужно
воспользоваться merge для объединения веток (применения изменений из
ветки amazing\_new\_feature к основной версии проекта).

.. code:: bash

    git merge amazing_new_feature

Теперь ветка master актуальна. Ветка amazing\_new\_feature больше не
нужна, и ее можно удалить.

.. code:: bash

    git branch -d amazing_new_feature

Отслеживание изменений, сделанных в коммитах
--------------------------------------------

У каждого коммита есть свой уникальный идентификатор в виде строки цифр
и букв. Чтобы просмотреть список всех коммитов и их идентификаторов,
можно использовать команду ``log``:

.. code:: bash

    git log

Как вы можете заметить, идентификаторы довольно длинные, но для работы с
ними не обязательно копировать их целиком — первых нескольких символов
будет вполне достаточно. Чтобы посмотреть, что нового появилось в
коммите, мы можем воспользоваться командой ``show``

.. code:: bash

    git show <commit id>

Чтобы увидеть разницу между двумя коммитами, используется команда
``diff`` (с указанием промежутка между коммитами):

.. code:: bash

    git diff <commit 1 id>..<commit 2 id>

Мы сравнили первый коммит с последним, чтобы увидеть все изменения,
которые были когда-либо сделаны. Обычно проще использовать
``git difftool``, так как эта команда запускает графический клиент, в
котором наглядно сопоставляет все изменения.

Возвращение файла к предыдущему состоянию
-----------------------------------------

Гит позволяет вернуть выбранный файл к состоянию на момент определенного
коммита. Это делается уже знакомой нам командой ``checkout``, которую мы
ранее использовали для переключения между ветками. Но она также может
быть использована для переключения между коммитами (это довольно
распространенная ситуация для Гита — использование одной команды для
различных, на первый взгляд, слабо связанных задач). В следующем примере
мы возьмем файл hello.txt и откатим все изменения, совершенные над ним к
первому коммиту. Чтобы сделать это, мы подставим в команду идентификатор
нужного коммита, а также путь до файла:

.. code:: bash

    git checkout <commit id> hello.txt

Исправление коммита
-------------------

Если вы опечатались в комментарии или забыли добавить файл и заметили
это сразу после того, как закоммитили изменения, вы легко можете это
поправить при помощи ``commit --amend``. Эта команда добавит все из
последнего коммита в область подготовленных файлов и попытается сделать
новый коммит. Это дает вам возможность поправить комментарий или
добавить недостающие файлы в область подготовленных файлов.

Для более сложных исправлений, например, не в последнем коммите или если
вы успели отправить изменения на сервер, нужно использовать ``revert``.
Эта команда создаст коммит, отменяющий изменения, совершенные в коммите
с заданным идентификатором.

Самый последний коммит может быть доступен по алиасу ``HEAD``:

.. code:: bash

    git revert HEAD

Для остальных будем использовать идентификаторы:

.. code:: bash

    git revert b10cc123

При отмене старых коммитов нужно быть готовым к тому, что возникнут
конфликты. Такое случается, если файл был изменен еще одним, более новым
коммитом. И теперь git не может найти строчки, состояние которых нужно
откатить, так как они больше не существуют.

Разрешение конфликтов при слиянии
---------------------------------

Помимо сценария, описанного в предыдущем пункте, конфликты регулярно
возникают при слиянии ветвей или при отправке чужого кода. Иногда
конфликты исправляются автоматически, но обычно с этим приходится
разбираться вручную — решать, какой код остается, а какой нужно удалить.

Давайте посмотрим на примеры, где мы попытаемся слить две ветки под
названием john\_branch и tim\_branch. И Тим, и Джон правят один и тот же
файл print\_list.py: функцию, которая отображает элементы массива.

Упражнение 3
~~~~~~~~~~~~

1. Создайте пустой файл print\_list.py

2. Создайте ветку john\_branch и в этой ветке добавьте в print\_list.py
   код

.. code:: python

    L = [1, 2, 3]

    for a in L:
        print(a)

3. Создайте ветку tim\_branch и в этой ветке добавьте в print\_list.py
   код

.. code:: python

    L = [1, 2, 3]

    for i in range(len(L)):
        print(L[i])

4. Теперь по очереди слейте ветки в master.

Система не смогла разрешить конфликт автоматически, значит, это придется
сделать разработчикам. Приложение отметило строки, содержащие конфликт.

Над разделителем ======= мы видим последний (HEAD) коммит, а под ним —
конфликтующий. Таким образом, мы можем увидеть, чем они отличаются и
решать, какая версия лучше. Или вовсе написать новую. В этой ситуации мы
так и поступим, перепишем все, удалив разделители, и дадим git понять,
что закончили.

Когда все готово, нужно закоммитить изменения, чтобы закончить процесс:

.. code:: bash

    git add -u  # добавить все изменения
    git commit -m "resolve loop conflict"

Как вы можете заметить, процесс довольно утомительный и может быть очень
сложным в больших проектах. Многие разработчики предпочитают
использовать для разрешения конфликтов клиенты с графическим
интерфейсом. (Для запуска нужно набрать ``git mergetool``).

Настройка .gitignore
====================

В большинстве проектов есть файлы или целые директории, в которые мы не
хотим (и, скорее всего, не захотим) коммитить. Мы можем удостовериться,
что они случайно не попадут в git add -A при помощи файла .gitignore

1. Создайте вручную файл под названием .gitignore и сохраните его в
   директорию проекта.

-  Внутри файла перечислите названия файлов/папок, которые нужно
   игнорировать, каждый с новой строки.

-  Файл .gitignore должен быть добавлен, закоммичен и отправлен на
   сервер, как любой другой файл в проекте.

Вот хорошие примеры файлов, которые нужно игнорировать:

-  Логи

-  Артефакты систем сборки

-  Папки node\_modules в проектах node.js

-  Папки, созданные IDE, например, Netbeans или IntelliJ

-  Разнообразные заметки разработчика.

Файл .gitignore, исключающий все перечисленное выше, будет выглядеть
так:

::

    *.log
    build/
    node_modules/
    .idea/
    my_notes.txt

Символ слэша в конце некоторых линий означает директорию (и тот факт,
что мы рекурсивно игнорируем все ее содержимое). Звездочка, как обычно,
означает шаблон.

Шаблоны .gitignore
~~~~~~~~~~~~~~~~~~

В сети есть много шаблонов .gitignore. Например, можно добавить файл
.gitignore при создании репозитория.

При работе в PyCharm в .gitignore необходимо добавить папку

::

    .idea/

Синтаксис .gitignore
~~~~~~~~~~~~~~~~~~~~

Изложен по `ссылке <https://git-scm.com/docs/gitignore>`__.

Добавление в .gitignore отслеживаемых путей
-------------------------------------------

Для того, чтобы игнорировать файл, его сначала надо сделать
неотслеживаемым. В этом легко убедиться если добавить строку

::

    good_bye.txt

в .gitignore и выполнить команды

.. code:: bash

    git add -u
    git commit -m "add good_bye.txt to .gitignore"
    git ls-tree --name-only HEAD

Легко видеть, что good\_bye.txt по-прежнему отслеживается.

Чтобы сделать файл неотслеживаемым, необходимо выполнить команду

.. code:: bash

    git rm --cached path/to/file/or/dir

Ключ ``--cached`` очень важен, так как, если его не указать, файл будет
просто удален из файловой системы.

Чтобы сделать неотслеживаемой всю директорию, используется ключ ``-r``

.. code:: bash

    git rm -r --cached path/to/dir

Таким образом, для игнорирования good\_bye.txt надо выполнить команды

.. code:: bash

    git rm --cached good_bye.txt
    git add -u                            # добавляем удаление файла в коммит
    git commit -m "remove good_bye.txt"

Убеждаемся, что good\_bye.txt игнорируется

.. code:: bash

    ls                                    # в списке должен быть good_bye.txt
    git status                            # файла good_bye.txt не должно быть в списках
    git ls-tree --name-only HEAD          # файла good_bye.txt не должно быть в списках

Исключение большого количества отслеживаемых файлов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Бывает, что разработчик случайно добавляет в Git много лишних файлов до
необходимой модификации .gitignore. Тогда можно в 3 команды сделать все
файлы либо отслеживаемыми, либо игнорируемыми. Внесите в .gitignore все,
что планируется игнорировать. Перейдите в корень репозитория.

.. code:: bash

    git rm -r --cached .                  # прекратите отслеживать ВЕСЬ репозиторий
    git add .                             # добавьте все неигнорируемое содержимое
    git commit -m "apply .gitignore"

Типичные ситуации
=================

``push`` отклонен, потому что удаленный репозиторий содержит изменения, не внесенные в локальную версию кода
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

При выполнении команды ``git push`` видим ошибку

::

     ! [rejected]        master -> master (fetch first)
    error: failed to push some refs to 'https://github.com/PeganovAnton/git_exercise.git'
    hint: Updates were rejected because the remote contains work that you do
    hint: not have locally. This is usually caused by another repository pushing
    hint: to the same ref. You may want to first integrate the remote changes
    hint: (e.g., 'git pull ...') before pushing again.
    hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Достаточно выполнить ``git pull`` и, если необходимо, разрешить
конфликты при слиянии.

``pull`` отклонен, потому что в локальном репозитории есть файл с несохраненными изменениями.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

При выполнении команды ``git pull`` видим ошибку

::

    error: Your local changes to the following files would be overwritten by merge:
        feature.txt
    Please, commit your changes or stash them before you can merge.
    Aborting

Такая ситуация возникает, если Вы нижеперечисленные действия

-  модифицировали файл,

-  при этом не закоммитили файл,

-  а затем запросили изменения для этого файла из удаленного
   репозитория.

Чтобы исправить ошибку необходимо выполнить одно из двух действий:

-  отбросить локальные изменения с помощью команды ``git stash``,

-  закоммитить локальные изменения.

Требуется загрузить из удаленного репозитория отдельно взятый файл
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Сначала необходимо заполучить изменения из удаленного репозитория, но
при этом не слить эти изменения с локальным репозиторием.

.. code:: bash

    git fetch

Теперь выбранный файл обновляется.

.. code:: bash

    git checkout origin/master -- path/to/file

Если эти изменения надо сохранить, не забудьте их закоммитить.

Как правильно делать коммиты
============================

Изменения, внесенные с коммитом, должны решать **одну** задачу. НЕ
делайте так, чтобы у Вас в одном коммите одновременно оказались починка
5-ти багов, переименование функции и новая фича. По истории коммитов
другие разработчики должны понимать, почему в данный кусок кода
реализован так, а не иначе. Каждое из изменений типа

-  исправление ошибки,

-  добавление новой функции,

-  рефакторинг (повышение понятности кода),

-  оптимизация алгоритма

должно сопровождаться **отдельным** коммитом.

Как правильно писать комментарии к коммиту
------------------------------------------

Комментарий к коммиту состоит из двух частей: заголовка и тела.
Заголовок - это часть комментария **до** первой пустой строки. Тело
комментария - это весь остальной текст. Заголовки отображаются в истории
коммитов при использовании команды ``git log`` и на github.com в истории
(кнопка history).

Пример
~~~~~~

Команда

.. code:: bash

    git log --oneline

дает результат

::

    dca0327 Merge branch 'master' of https://github.com/PeganovAnton/git_exercise
    052071c blaahhh
    099c0c7 Merge branch 'master' of https://github.com/PeganovAnton/git_exercise
    0d881a2 extend hello.txt
    90efdc2 blah blah
    2df598d Revert "add "Yes, it is string""
    4a4b760 add "Yes, it is string"
    0294ffe apply .gitignore
    90760c3 modify .gitignore
    6f96800 Merge branch 'master' of https://github.com/PeganovAnton/git_exercise
    d5d45c2 Initial commit
    b00c164 merge print_list.py
    a56b822 add print_list.py
    83f1f30 add print_list.py
    270bd46 Merge branch 'amazing_new_feature'
    295d83d modify
    db35e1c modify
    bcb8302 add new feature
    6f36888 create good_bye.txt
    a01cd5f create README.md
    0386d24 add hello.txt

Тела коммитов отделяются от заголовков одной пустой строкой. В теле
коммита может быть любое число пустых строк. Тело может быть любого
размера, но все же желательно, чтобы он было кратким и понятным.

Пример коммита.
~~~~~~~~~~~~~~~

::

    feat: allow provided config object to extend other configs

    BREAKING CHANGE: `extends` key in config file is now used for extending other config files

**Внимательно** прочитайте статьи
`раз <https://medium.com/grisme/%D0%BA%D0%B0%D0%BA-%D0%BF%D0%B8%D1%81%D0%B0%D1%82%D1%8C-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2-%D0%B2-git-9ed19ebc5ebf>`__
и `два <https://www.conventionalcommits.org/ru/v1.0.0-beta.2/>`__.

Как видите, бывают разные стили написания коммитов, но они сходятся в
том, что

-  заголовок пишется в повелительном наклонении,

-  длина заголовка не превышает 50 символов,

-  длина строки в теле не больше 72 симолов,

-  в теле сообщения коммита указывается, какие изменения были сделаны и
   **зачем**. Внимание, **зачем**, а не **как**. Как все работает
   следует писать в комментариях к коду.

